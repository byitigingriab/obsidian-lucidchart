/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var D=Object.prototype.hasOwnProperty;var E=(r,a)=>()=>(a||r((a={exports:{}}).exports,a),a.exports),L=(r,a)=>{for(var e in a)w(r,e,{get:a[e],enumerable:!0})},S=(r,a,e,i)=>{if(a&&typeof a=="object"||typeof a=="function")for(let t of x(a))!D.call(r,t)&&t!==e&&w(r,t,{get:()=>a[t],enumerable:!(i=b(a,t))||i.enumerable});return r};var A=r=>S(w({},"__esModule",{value:!0}),r);var v=E((d,y)=>{"use strict";var T=function(){if(typeof self!="undefined")return self;if(typeof window!="undefined")return window;if(typeof c!="undefined")return c;throw new Error("unable to locate global object")},c=T();y.exports=d=c.fetch;c.fetch&&(d.default=c.fetch.bind(c));d.Headers=c.Headers;d.Request=c.Request;d.Response=c.Response});var U={};L(U,{default:()=>u});module.exports=A(U);var n=require("obsidian"),I={apiKey:"<api key>",baseUrl:"https://api.lucid.co",attachmentPath:""},u=class extends n.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"refresh-lucid-drawing-command",name:"Reload Lucidchart Drawing",editorCallback:async(e,i)=>{var t=e.getSelection(),s=new RegExp("lucidchart~(.*)~(.*)~(.*).png"),l=t.match(s);if(l){let h=l[1],g=l[3],p=await this.exportLucidDrawing(h,g);var o="";t.startsWith("![[")?o+="![["+p:o+=p,t.endsWith("]]")&&(o+="]]"),e.replaceSelection(o),new n.Notice("Lucidchart Drawing Updated")}}}),this.addCommand({id:"insert-lucid-drawing-command",name:"Insert Lucidchart Drawing",editorCallback:(e,i)=>{new m(this.app,async t=>{var s=new RegExp(".*/lucidchart/(.*)/.*page=(.*)#"),l=t.match(s);if(l){let o=l[1],h=l[2],g=await this.exportLucidDrawing(o,h);e.replaceSelection("![["+g+"]]"),new n.Notice("Lucidchart Drawing Inserted")}}).open()}}),this.addSettingTab(new f(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},I,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async exportLucidDrawing(e,i){let t=v(),l=await(await t(this.settings.baseUrl+"/documents/"+e,{method:"GET",headers:{Authorization:"Bearer "+this.settings.apiKey,"Lucid-Api-Version":"1"}})).json(),o=this.settings.attachmentPath+"/lucidchart~"+e+"~"+l.version+"~"+i+".png";if(!this.app.vault.getFileByPath(o)){let P=await(await(await t(this.settings.baseUrl+"/documents/"+e+"?pageId="+i+"&crop=content",{method:"GET",headers:{Authorization:"Bearer "+this.settings.apiKey,"Lucid-Api-Version":"1",Accept:"image/png"}})).blob()).arrayBuffer();await this.app.vault.createBinary(o,P)}return o}},m=class extends n.Modal{constructor(a,e){super(a),this.setTitle("Insert Lucidchart Drawing");let i="";new n.Setting(this.contentEl).setName("Url").setTooltip("Lucidchart Drawing URL from Browser").addText(t=>t.onChange(s=>{i=s})),new n.Setting(this.contentEl).addButton(t=>t.setButtonText("Submit").setCta().onClick(()=>{this.close(),e(i)}))}},f=class extends n.PluginSettingTab{constructor(e,i){super(e,i);this.plugin=i}display(){let{containerEl:e}=this,i=this.app.vault.getAllFolders(!0).map(t=>t.path);e.empty(),new n.Setting(e).setName("Lucidchart API Key").setDesc("API Key created in the Lucidchart developer portal").addText(t=>t.setPlaceholder("Enter your api key").setValue(this.plugin.settings.apiKey).onChange(async s=>{this.plugin.settings.apiKey=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Lucidchart API Base URL").addText(t=>t.setValue(this.plugin.settings.baseUrl).onChange(async s=>{this.plugin.settings.baseUrl=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Drawing Path").addDropdown(t=>{i.forEach(s=>{t.addOption(s,s)}),t.setValue(this.plugin.settings.attachmentPath).onChange(async s=>{this.plugin.settings.attachmentPath=s,await this.plugin.saveSettings()})})}};
